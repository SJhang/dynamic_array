exit
c
self[0]
store[1]
store[0]
length
n
capacity
length
val
n
self[0]
n
val
self[0]
length
n
self[3]
self[1]
self[0]
arr[0]
n
length
self[1]
self[0]
n
display store
store
exit
arr [5]
p i
i
arr
c
self[0]
arr[0]
store
exit
c
self[0]
store
exit
display i
arr[0]
display arr
c
arr[7]
arr
arr[1]
arr[2]
display arr[i]
arr[5]
arr[0]
c
display i
display arr
c
n
display i
i
display arr
display store
c
display arr
c
display arr
quit
c
display start_idx
display store
c
arr
c
arr
quit
x
c
cc
c
quit
c
cc
c
cc
c
display start_idx
display index
display store
c
display store
c
store
store[7]
-1 % 8 
start_idx
length
n
length
n
length
store
c
display store
display sotre
c
val
self
n
length
n
nn
i
n
val
n
c
display store
c
n
display store
c
5.times do |i|
arr
store
c
self
length.times{ |i| self[i + 1] = self[i] }
length
length = 8
store
resize!
c
store
